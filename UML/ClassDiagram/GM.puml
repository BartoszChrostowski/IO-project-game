@startuml

skinparam shadowing false
skinparam monochrome true
skinparam classAttributeIconSize 0
hide circle

skinparam class {
	BackgroundColor white
}

AbstractField <|-- GoalField
AbstractField <|-- NonGoalField
AbstractField <|-- TaskField

class AbstractField
{
- x: Int {readOnly}
- y: Int {readOnly}
- WhosHere: Player
- pieces: AbstractPiece {seq}
+ Leave(Player)
+ PickUp(Player)
+ Put(Piece): Boolean
+ MoveHere(Player p): Boolean
+ ContainsPieces(): Boolean
+ GetPosition(): Int[2]
}

class GoalField
{
+ PickUp(Player)
+ Put(Piece): Boolean
}

class NonGoalField
{
+ PickUp(Player)
+ Put(Piece): Boolean
}

class TaskField
{
+ PickUp(Player)
+ Put(Piece): Boolean
}

class Configuration
{
+ movePenalty: TimeSpan {readOnly}
+ askPenalty: TimeSpan {readOnly}
+ discoveryPenalty: TimeSpan {readOnly}
+ putPenalty: TimeSpan {readOnly}
+ checkPenalty: TimeSpan {readOnly}
+ responsePenalty: TimeSpan {readOnly}
+ x: Int {readOnly}
+ y: Int {readOnly}
+ numberOfGoals: Int {readOnly}
}

GM *-left-"1" Configuration

class GM
{
+ AcceptMessage()
+ GenerateGUI()
~ Discover(Field)
~ EndGame()
- players: Dictionary<int,Player> {readOnly}
- map: Field[][] {readOnly}
- LegalKnowledgeReplies: Int[2] {unique}
- conf: Configuration
- GeneratePiece()
- ForwardKnowledgeQuestion()
- ForwardKnowledgeReply()
~ RedTeamPoints: int
~ BlueTeamPoints: int
}


enum Team <<enumeration>>
{
Red
Blue
}
GM *--"2..*" Player
Player o--"0..1" AbstractField
Player *-right-"1" MessageSenderService
Player .down.> Team
AbstractField o--"0..*" AbstractPiece
class Player
{
+ tryLock(TimeSpan): Boolean
+ Move(Field)
+ DestroyHolding()
+ CheckHolding()
+ Discover(GM)
+ Put() : Boolean
~ SetHolding(Piece)
~ GetPosition(): Int[2]
- id: Int
- messageCorrelationId: Int
- team: Team
- isLeader: Boolean
- holding: Piece
- position: AbstractField
- LockedTill: Time
- messageService: MessageSenderService
}

interface MessageSenderService <<interface>>
{
+ SendMessage()
}

GM *--"4..*" AbstractField

AbstractPiece <|-- ShamPiece
AbstractPiece <|-- NormalPiece

Player --"0..1" AbstractPiece

class AbstractPiece
{
+ CheckForSham(): Boolean
+ Put(AbstractField): Int
}
class ShamPiece
{
+ CheckForSham(): Boolean
+ Put(AbstractField): Int
}
class NormalPiece
{
+ CheckForSham(): Boolean
+ Put(AbstractField): Int
}

@enduml
